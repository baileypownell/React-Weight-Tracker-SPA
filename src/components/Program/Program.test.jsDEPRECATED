// THIS TEST TESTS THE COMPONENT BY USING A MOCK STATE FOR Redux
// I don't currently favor this method because it requires using a library (redux-mock-store) in a way that it was not designed to be used, and turns the test more into an integration test than a unit test


import React from 'react';
// Jest comes with test assertsions like toBe() and .toEqual() as well as Snapshot tests

import { mount, shallow, render } from 'enzyme';
// mounting => full DOM rendering including child components. If you are wanting to test interacting with a child component then the mount method can be used.
// shallow => renders only the component, no children --- good for unit testing, has access to lifecycle methods by default but cannot access props passed into the root component.
// render => renders to static HTML, including kids but does not have access to lifecycle methods and is less costly than mount

// Enzyme is a testing library that requires an adapter
import Enzyme from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

// don't forget to configure the adapter with the import
Enzyme.configure({ adapter: new Adapter() });

import Program from './Program';
// because Program is connected with Redux, we must include extra packages for configuring the test to run properly, including Provider
import { Provider } from "react-redux";
// use redux-mock-store for making a fake store
import configureMockStore from "redux-mock-store";
const mockStore = configureMockStore();
const store = mockStore({});

// test suite
describe('Program Component', () => {

  // a test block
  test('receives first name as a prop', () => {

    const PROGRAM = mount(
      <Provider store={store}><Program /></Provider>
    );

    expect(PROGRAM.props().includeProp).toEqual('firstName');
  })
});
